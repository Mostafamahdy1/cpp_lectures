#include <algorithm>
#include <array>
#include <iostream>
#include <string>
#include <vector>

int main()
{
        // Creating the database array of the online supermarket

        std::vector<std::string> items {"shampoo", "Vegetables", "Milk", "Meat",      "Chicken",       "Chips",    "Pepsi",  "White-toast",
                                        "Pasta",   "sauce",      "Eggs", "Cheese",    "Cereal",        "Burgers",  "Jam",    "Redbull",
                                        "monster", "Nescafe",    "soap", "Chocolate", "Oil",           "Yoghourt", "Tissue", "Tea",
                                        "Water",   "Cheetos",    "Rice", "Jelly",     "Peanut-butter", "Salt"};

        // vector array for prices in pounds same order as online sp array
        std::vector<std::string> prices {"5",   "3", "2",    "5",    "5", "1", "1", "2",    "1.5", "2", "4.5", "3", "3.10", "4.5",  "2.5",
                                         "1.5", "3", "2.75", "1.99", "1", "5", "1", "1.08", "3",   "1", "1.5", "6", "1.5",  "4.30", "4"};

        // vector array for best before date
        std::vector<std::string> best_b {"1/1/2025",   "1/4/2022",    "1/4/2022",   "25/4/2022",  "25/4/2022",  "01/01/2023",
                                         "01/01/2023", "01/05/2022",  "01/01/2024", "01/05/2022", "01/05/2022", "22/04/2022",
                                         "01/01/2024", " 01/05/2022", "15/06/2022", "22/2/2024",  "09/1/2024",  "01/01/2025",
                                         "01/01/2025", "08/09/2022",  "17/10/2022", "15/4/2022",  "01/01/2027", "12/12/2023",
                                         "01/01/2024", "19/08/2023",  "07/12/2023", "28/2/2023",  "01/11/2022", "13/4/2025"};

        // vextor array for item types
        std::vector<std::string> section {"health", "food",   "Milk-products", "food",          "food",   "snacks",        " drinks", "food",
                                          "food",   "food",   "food",          "Milk-products", "snacks", "food",          "food",    "drinks",
                                          "drinks", "drinks", "health",        "snacks",        "oil",    "Milk-products", "health",  "drinks",
                                          "drinks", "snacks", "food",          "snacks",        "food",   "food"};

        // declaring variable to display the products
        std::string              display = ".. ";

        std::cout << "This is the items availbe in our supermarket and their price, section and best before date: " << std::endl << std::endl;

        // getting the length of the vector array

        int array_lenght = items.size();

        std::cout << "The size of the vector array: " << array_lenght << std::endl << std::endl;

        // declaring the i

        int i = 0;

        while (i < array_lenght)
        {
                std::cout << items[i] << ", ";
                std::cout << "£" << prices[i] << ", ";
                std::cout << section[i] << ", ";
                std::cout << best_b[i] << std::endl;
                i++;
        }

        std::cout << std::endl;

        // declaring add variable to store the answer of the user
        char add;

        // ask the user if he wants to add anything
        std::cout << "Do you want to add any item for the databse? Enter Y for yes N for no." << std::endl;

        std::cin >> add;

        // declaring a vector array for itema_added, prices_added, best_b_added, section_added
        std::string items_add   = "t";
        std::string prices_add  = "t";
        std::string best_b_add  = " t";
        std::string section_add = "t";

        // if the user wants to add any item

        if (add == 'Y' || add == 'y')

        {
                // reading the items from the user

                while (items_add != "q" && items_add != "Q")
                {
                        std::cout << "please enter the name of the item you want to add to the databse?" << std::endl;
                        std::cin >> items_add;
                        items.push_back(items_add);

                        // reading the price from the user

                        std::cout << "Enter the price of the item in pounds" << std::endl;
                        std::cin >> prices_add;
                        prices.push_back(prices_add);

                        // reading the best before date from the user

                        std::cout << "Enter the best before date of the item in this form (dd/mm/yyyy)" << std::endl;
                        std::cin >> best_b_add;
                        best_b.push_back(best_b_add);

                        // reading the section from the user

                        std::cout
                            << "Choose a section for the item from (food, drinks, snacks, Milk products, Health & beuty, oil) or add section if it is not related to those"
                            << std::endl;
                        std::cin >> section_add;
                        section.push_back(section_add);

                        // if the user wants to exist the program

                        std::cout << "Enter Q if you want to quit or any other thing if you like to continue" << std::endl;
                        std::cin >> items_add;
                }
        }
        else if (add == 'N' || add == 'n') { std::cout << "No items will be added to this database. " << std::endl << std::endl; }

        else
        {        // if the input is inavlid it will repeat until it gets a valid input
                do {
                        std::cout << "Invalid option. Please re-enter: ";
                        std::cin >> add;
                } while (add != 'N' && add != 'n' && add != 'Y' && add != 'y');
        }
        array_lenght = items.size();
        std::cout << "The size of the vector array: " << array_lenght << std::endl << std::endl;

        std::cout << "This is the latest version of the database: " << std::endl << std::endl;

        int j        = 0;

        array_lenght = items.size();

        while (j < array_lenght)
        {
                std::cout << items[j] << ", ";
                std::cout << "£" << prices[j] << ", ";
                std::cout << section[j] << ", ";
                std::cout << best_b[j] << std::endl;
                j++;
        }

        // more space

        std::cout << std::endl;

        // Declaring search variable, search_item
        char        search;
        std::string search_item = "..";

        // declaring i_address to hold value of the index

        int         i_address;

        // asking the user if he wants to search for any item

        std::cout << "Do you want to search for any item? Enter Y for yes N for no." << std::endl;

        std::cin >> search;

        if (search == 'Y' || search == 'y')
        {
                // reading the item that the user wants to search for

                while (search_item != "q" && search_item != "Q")
                {
                        std::cout
                            << "Please enter the name of the item you want to search exactly as wirttin in the list including capitals and dashes"
                            << std::endl;
                        std::cin >> search_item;

                        for (int i = 0; i < array_lenght; i++)
                        {
                                if (items[i] == search_item)
                                {
                                        i_address = i;

                                        // std::cout<<"The position of the item is "<<m_address<<std::endl<<std::endl;
                                        std::cout << "yes the item is availbe"
                                                  << " " << items[i_address] << ", "
                                                  << "£" << prices[i_address] << ", " << section[i_address] << ", " << best_b[i_address] << std::endl
                                                  << std::endl;
                                }
                        }

                        std::cout << "If there is no output check if you typed the item exactly as in the list" << std::endl << std::endl;
                        std::cout << "Enter Q if you want to quit or any other thing if you like to continue" << std::endl;
                        std::cin >> search_item;
                        std::cout << std::endl;
                        std::cout << std::endl;
                }
        }

        else if (search == 'N' || search == 'n') { std::cout << "No search operation " << std::endl << std::endl; }

        else
        {        // if the input is inavlid it will repeat until it gets a valid input
                do {
                        std::cout << "Invalid option. Please re-enter: ";
                        std::cin >> search;
                } while (search != 'N' && search != 'n' && search != 'Y' && search != 'y');
        }

        // declaring variable search_section and section_search as sec

        char        sec;

        std::string search_section = "..";

        // declaring s_address to hold value of the index

        int         s_address;

        // asking the user if he wants to search by section
        std::cout << "Do you want to search by section? Enter Y for yes N for no." << std::endl;

        std::cin >> sec;

        if (sec == 'Y' || sec == 'y')
        {
                while (search_section != "q" && search_section != "Q")
                {
                        std::cout << "Please enter the section name you want to search exactly as wirttin in the list including capitals"
                                  << std::endl;
                        std::cin >> search_section;

                        for (int i = 0; i < array_lenght; i++)
                        {
                                if (section[i] == search_section)
                                {
                                        s_address = i;

                                        std::cout << search_section << ":"
                                                  << " " << items[s_address] << ", "
                                                  << "£" << prices[s_address] << ", " << section[s_address] << ", " << best_b[s_address] << std::endl
                                                  << std::endl;
                                }
                        }

                        std::cout << "If there is no output check if you typed the item exactly as in the list" << std::endl << std::endl;
                        std::cout << "Enter Q if you want to quit or any other thing if you like to continue" << std::endl;
                        std::cin >> search_section;
                        std::cout << std::endl;
                        std::cout << std::endl;
                }
        }
        else if (sec == 'N' || sec == 'n') { std::cout << "No search operation " << std::endl << std::endl; }

        else
        {        // if the input is inavlid it will repeat until it gets a valid input
                do {
                        std::cout << "Invalid option. Please re-enter: ";
                        std::cin >> sec;
                } while (sec != 'N' && sec != 'n' && sec != 'Y' && sec != 'y');
        }

        // performing the delete operation

        // declaring char of the delete

        char        del;

        std::string delete_item = "..";

        // declaring d_address to hold value of the index

        int         d_address;

        // asking the user if he wants to delete

        std::cout << "Do you want to delete any item? Enter Y for yes N for no." << std::endl;

        std::cin >> del;

        if (del == 'Y' || del == 'y')
        {
                while (delete_item != "q" && delete_item != "Q")
                {
                        std::cout << "Please enter the name of the item you want to delete exactly as wirttin in the list including capitals"
                                  << std::endl;
                        std::cin >> delete_item;

                        for (int i = 0; i < array_lenght; i++)
                        {
                                if (items[i] == delete_item)
                                {
                                        d_address = i;

                                        items.erase(items.begin() + i);
                                        prices.erase(prices.begin() + i);
                                        section.erase(section.begin() + i);
                                        best_b.erase(best_b.begin() + i);
                                }
                        }

                        array_lenght = items.size();
                        std::cout << "The size of the vector array: " << array_lenght << std::endl << std::endl;
                        int i = 0;

                        std::cout << "This is the latest version of the database: " << std::endl << std::endl;

                        while (i < array_lenght)
                        {
                                std::cout << items[i] << ", ";
                                std::cout << "£" << prices[i] << ", ";
                                std::cout << section[i] << ", ";
                                std::cout << best_b[i] << std::endl;
                                i++;
                        }

                        std::cout << "Enter Q if you want to quit or any other thing if you like to continue" << std::endl;
                        std::cin >> delete_item;
                        std::cout << std::endl;
                        std::cout << std::endl;
                }
        }
        else if (del == 'N' || del == 'n') { std::cout << "No delete operation " << std::endl << std::endl; }

        else
        {        // if the input is inavlid it will repeat until it gets a valid input
                do {
                        std::cout << "Invalid option. Please re-enter: ";
                        std::cin >> del;
                } while (del != 'N' && del != 'n' && del != 'Y' && del != 'y');
        }

        // declaring edit, edit_item, editing

        char        edit;
        std::string edit_item = "..";
        char        edit_part;
        int         e_adress;
        std::string NEW = "..";

        // Editing operation

        std::cout << "Do you want to edit any item? Enter Y for yes N for no" << std::endl << std::endl;

        std::cin >> edit;
        std::cout << std::endl;

        if (edit == 'y' || edit == 'Y')
        {
                while (edit_item != "q" && edit_item != "Q")
                {
                        std::cout << "Enter the name of item you want to edit exactly as wirttin in the list" << std::endl << std::endl;
                        std::cin >> edit_item;
                        std::cout << std::endl;

                        for (int i = 0; i < array_lenght; i++)
                        {
                                if (items[i] == edit_item)
                                {
                                        std::cout
                                            << "What do you want to edit for this item? Enter N for name, P for price, S for section or D for best before date"
                                            << std::endl
                                            << std::endl;
                                        std::cin >> edit_part;

                                        if (edit_part == 'n' || edit_part == 'N')
                                        {
                                                std::cout << "Enter the new name for the item" << std::endl;
                                                std::cin >> NEW;
                                                items.at(i) = NEW;
                                        }
                                        else if (edit_part == 'p' || edit_part == 'P')
                                        {
                                                std::cout << "Enter the new price for the item" << std::endl;
                                                std::cin >> NEW;
                                                prices.at(i) = NEW;
                                        }
                                        else if (edit_part == 's' || edit_part == 'S')
                                        {
                                                std::cout << "Enter the new section name for the item" << std::endl;
                                                std::cin >> NEW;
                                                section.at(i) = NEW;
                                        }
                                        else if (edit_part == 'd' || edit_part == 'D')
                                        {
                                                std::cout << "Enter the new best before date for the item in this form(dd/mm/yyyy)" << std::endl;
                                                std::cin >> NEW;
                                                best_b.at(i) = NEW;
                                        }
                                        else
                                        {        // if the input is inavlid it will repeat until it gets a valid input
                                                do {
                                                        std::cout << "Invalid option. Please re-enter: ";
                                                        std::cin >> edit_part;
                                                } while (edit_part != 'N' && edit_part != 'n' && edit_part != 'P' && edit_part != 'p' &&
                                                         edit_part != 's' && edit_part != 'S' && edit_part != 'D' && edit_part != 'd');
                                        }
                                }
                        }

                        std::cout << "If there is no output check if you typed the item exactly as in the list" << std::endl << std::endl;
                        std::cout << "Enter Q if you want to quit or any other thing if you like to continue" << std::endl;
                        std::cin >> edit_item;
                        std::cout << std::endl;
                        std::cout << std::endl;
                }
        }

        else if (edit == 'n' || edit == 'N') { std::cout << "No edit operation" << std::endl << std::endl; }

        else
        {        // if the input is inavlid it will repeat until it gets a valid input
                do {
                        std::cout << "Invalid option. Please re-enter: ";
                        std::cin >> edit;
                } while (edit != 'N' && edit != 'n' && edit != 'Y' && edit != 'y');
        }
        int k = 0;
        std::cout << "This is the latest version of the database: " << std::endl << std::endl;
        while (k < array_lenght)
        {
                std::cout << items[k] << ", ";
                std::cout << "£" << prices[k] << ", ";
                std::cout << section[k] << ", ";
                std::cout << best_b[k] << std::endl;
                k++;
        }
}
